        //TODO: [RMV] Print the matrix with the car list
        printf("Matrix with car list:\n");
        for(int i = 0; i < highway -> number_of_nodes; i++){
            printf("Node %d: ", highway -> adjacency_matrix[i] -> root -> station_id);
            if(highway -> adjacency_matrix[i] -> root -> number_of_cars == 0){
                printf("No cars\n");
            } else {
                for(int j = 0; j < highway -> adjacency_matrix[i] -> root -> number_of_cars; j++){
                    printf("%d ", highway -> adjacency_matrix[i] -> root -> cars[j]);
                }
                printf("\n");
            }
        }

        //TODO: [RMV] Print the matrix with the exiting edges
        printf("Matrix with exiting edges:\n");
        for(int i = 0; i < highway -> number_of_nodes; i++){
            printf("Node %d: ", highway -> adjacency_matrix[i] -> root -> station_id);
            if(highway -> adjacency_matrix[i] -> number_of_edges == 0){
                printf("No exiting edges\n");
            } else {
                for(int j = 0; j < highway -> adjacency_matrix[i] -> number_of_edges; j++){
                    printf("%d ", highway -> adjacency_matrix[i] -> edges[j]);
                }
                printf("\n");
            }
        }

        //TODO: [RMV] Print max and min distance of the highway
        printf("Max distance: %d\n", highway -> max_distance);
        printf("Min distance: %d\n", highway -> min_distance);
